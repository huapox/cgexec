#!/bin/bash

## cgexec - execute a command in a cgroup
## v.20181109
##
## Requires Linux Control Groups version v2
## https://www.kernel.org/doc/Documentation/cgroup-v2.txt
##
## Usage: -i <io.weight> -c <cpu.weight> -m <memory.high> -M <memory.max>  <cmd>

SELF=$$
CPU=50
IO=50
MEM_HIGH=max
MEM_MAX=max
CGBASE="/sys/fs/cgroup"


help_text(){
cat << END

 Attaches a program <cmd> to a temporary cgroup with defined limits.
 Requires Linux Control Groups v2

 Usage: -i <io.weight> -c <cpu.weight> -m <memory.high> -M <memory.max> -g <group> <cmd>
 Valid values:
 : cpu.weight   0-10000, default 50.
 : io.weight    0-10000, default 50.
 : memory.high  0-max, default 'max'. Soft limit.
 : memory.max   0-max, default 'max'. Hard limit.
 : group        existing cgroup to attach to (not implemented). Default 'cmd.xxxx' temportary group.
 : cmd          command to execute.
END
}

cg_create(){
    CG=`mktemp -d -p $CGBASE cmd.XXXX`
    echo $SELF > "$CG/cgroup.procs"
    echo $IO   > "$CG/io.weight"

	# BFQ I/O scheduler has its own io.bfq. names.
	if [ -f "$CG/io.bfq.weight" ]; then
		echo $IO   > "$CG/io.bfq.weight"
	fi

    echo $CPU  > "$CG/cpu.weight"
    echo $MEM_HIGH  > "$CG/memory.high"
    echo $MEM_MAX  > "$CG/memory.max"
}

cg_cleanup(){
    while read p; do
        echo "$p" > $CGBASE/cgroup.procs
    done < $CG/cgroup.procs
    rmdir $CG
}



# Check arguments
while getopts 'c:i:m:M:h' OPT; do
    case "$OPT" in
        i)
            IO="$OPTARG"
            echo "I/O weight = $OPTARG"
        ;;
        c)
            CPU="$OPTARG"
            echo "CPU weight = $OPTARG"
        ;;
        m)
            MEM_HIGH="$OPTARG"
            echo "Memory High = $OPTARG"
        ;;
        M)
            MEM_MAX="$OPTARG"
            echo "Memory Max = $OPTARG"
        ;;
        h)
			help_text
        	exit 0
        ;;
    esac
done
shift "$(($OPTIND -1))"
CMD=$*



# execute $CMD in a cgroup
cg_create
    echo executing $CMD...
    $CMD
cg_cleanup
